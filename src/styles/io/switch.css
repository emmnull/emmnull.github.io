/* overrides */

@utility aspect-square {
  --switch-item-icon-opacity: calc(var(--opacity-io-icon) * 1.5);
  --switch-item-padding: var(--spacing-io-nesting);
}

/* states */

@custom-variant switch-hover {
  &:hover {
    @slot;
  }
}

@custom-variant switch-focus {
  &:focus-visible,
  &:has(:focus-visible) {
    @slot;
  }
}

@custom-variant switch-press {
  &:active,
  &:has(:active) {
    @slot;
  }
}

@custom-variant switch-disabled {
  &[aria-disabled='true'],
  &:disabled {
    @slot;
  }
}

@custom-variant switch-item-hover {
  &:where(:hover:not(:active)) {
    @slot;
  }
}

@custom-variant switch-item-focus {
  &:focus-visible {
    @slot;
  }
}

@custom-variant switch-item-press {
  &:active {
    @slot;
  }
}

@custom-variant switch-item-current {
  &:is([aria-current]:where(:not([aria-current='false'])), [aria-checked='true'], [aria-pressed='true'], :checked),
  &:has(
      > :is([aria-current]:where(:not([aria-current='false'])), [aria-checked='true'], [aria-pressed='true'], :checked)
    ),
  &:has(
      .switch-input:is(
          [aria-current]:where(:not([aria-current='false'])),
          [aria-checked='true'],
          [aria-pressed='true'],
          :checked
        )
    ) {
    @slot;
  }
}

@custom-variant switch-item-disabled {
  &:is([aria-disabled='true'], :disabled),
  &:has(> :is([aria-disabled='true'], :disabled)),
  &:has(.switch-input:is([aria-disabled='true'], :disabled)) {
    @slot;
  }
}

/* parts */

@utility switch-base {
  --switch-background: ;
  --switch-border-color: ;
  --switch-border-style: ;
  --switch-item-padding: var(--spacing-io-padding);
  --switch-item-background: ;
  --switch-item-color: ;
  --switch-item-border-color: ;
  --switch-item-border-style: ;
  --switch-item-icon-color: ;
  --switch-item-icon-opacity: ;
  --switch-item-thumb-background: ;
  --switch-item-thumb-border-color: ;
  --switch-item-thumb-border-style: ;
  background: var(--switch-background);
  border-color: var(--switch-border-color);
  border-style: var(--switch-border-style);
  position: relative;
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  align-items: stretch;
  max-height: 100%;
  transition-property: all;
  transition-timing-function: ease-out;
  transition-duration: var(--transition-duration-io);
  padding: var(--spacing-io-nesting);
  gap: var(--outline-width-io);
  border-radius: var(--radius-io);
  min-width: var(--spacing-io);
  border-width: var(--border-width-io);
  outline-color: oklch(from var(--color-cta) calc(l * var(--io-lightness-factor-soft)) c h);
  @apply io-nest;
  @variant switch-focus {
    outline-style: solid;
    outline-width: var(--outline-width-io);
  }
}

@utility switch-item {
  color: var(--switch-item-color);
  background: var(--switch-item-background);
  border-style: var(--switch-item-border-style);
  border-color: var(--switch-item-border-color);
  padding-inline: var(--switch-item-padding);
  position: relative;
  display: flex;
  flex-direction: row;
  align-items: center;
  z-index: 0;
  transition-property: all;
  transition-timing-function: ease-out;
  transition-duration: var(--transition-duration-io);
  gap: var(--spacing-io-gap);
  height: var(--spacing-io);
  border-radius: var(--radius-io);
  border-width: var(--border-width-io);
  @variant switch-item-hover {
    transition-duration: 0s;
  }
  @variant switch-item-focus {
    outline-style: solid;
    outline-width: var(--outline-width-io);
  }
  @variant switch-item-press {
    transition-duration: calc(0.5 * var(--transition-duration-io));
    transform: var(--transform-io-press);
  }
  @variant switch-item-current {
    &:not(:has(.switch-item-thumb)) {
      &::after {
        @apply switch-item-thumb;
        content: '';
        transition: inherit;
        @starting-style {
          opacity: 0;
          inset: var(--spacing-io-face-inset);
        }
      }
    }
  }
  /* with leading content */
  &:has(> .switch-item-leading) {
    padding-left: var(--spacing-io-nesting);
  }
  /* with trailing content */
  &:has(> .switch-item-trailing) {
    padding-right: var(--spacing-io-nesting);
  }
  /* auto-icon */
  & > * {
    @variant icon {
      @apply switch-item-icon;
    }
  }
}

@utility switch-item-pseudo-face {
  &:not(input, select, textarea) {
    background: none;
    &::before {
      content: '';
      background: var(--switch-item-background);
      inset: var(--spacing-io-face-inset);
      pointer-events: none;
      z-index: -1;
      position: absolute;
      border-radius: inherit;
      transition: inherit;
    }
    @variant switch-item-hover {
      &::before {
        transition-property: inset;
        transition-duration: calc(0.5 * var(--transition-duration-io));
        inset: 0;
      }
    }
    @variant switch-item-press {
      &::before {
        inset: 0;
      }
    }
    @variant switch-item-current {
      &::before {
        inset: 0;
      }
    }
  }
}

@utility switch-item-thumb {
  position: absolute;
  inset: 0;
  border-radius: inherit;
  flex: none;
  pointer-events: none;
  z-index: -1;
  background: var(--switch-item-thumb-background);
  border-style: var(--switch-item-thumb-border-style);
  border-color: var(--switch-item-thumb-border-color);
  border-width: var(--border-width-io);
}

/* @utility switch-item-thumb-* {
  @variant switch-item-current {
    &::after {
      content: '';
      view-transition-name: --value([ *]);
      position: absolute;
      inset: 0;
      border-radius: inherit;
      flex: none;
      pointer-events: none;
      z-index: -1;
      background: var(--switch-item-thumb-background);
      border-style: var(--switch-item-thumb-border-style);
      border-color: var(--switch-item-thumb-border-color);
      border-width: var(--border-width-io);
    }
  }
} */

@utility switch-item-icon {
  transition-duration: inherit;
  color: var(--switch-item-icon-color);
  opacity: var(--switch-item-icon-opacity);
  width: var(--spacing-io-icon);
  height: var(--spacing-io-icon);
  stroke-width: var(--stroke-width-io-icon);
}

@utility switch-item-content {
  @apply io-nest;
}

@utility switch-item-leading {
  @apply switch-item-content;
}

@utility switch-item-trailing {
  @apply switch-item-content;
}

/* variants */

@utility switch {
  @apply switch-base;
  --switch-background: --alpha(var(--color-io) / var(--opacity-io-face));
  --switch-item-color: var(--color-on-io);
  --switch-item-thumb-background: --alpha(var(--color-io) / var(--opacity-io-face-strong));
  @variant switch-hover {
    --switch-background: --alpha(var(--color-io) / var(--opacity-io-face-soft));
    --switch-item-color: oklch(from var(--color-on-io) calc(l * var(--io-lightness-factor-soft)) c h);
  }

  .switch-item {
    @apply switch-item-pseudo-face;
    @variant switch-item-hover {
      --switch-item-color: var(--color-on-io);
      --switch-item-background: --alpha(var(--color-io) / var(--opacity-io-face));
    }
    @variant switch-item-current {
      --switch-item-background: transparent;
      --switch-item-color: oklch(from var(--color-on-io) calc(l * var(--io-lightness-factor-strong)) c h);
    }
    @variant switch-item-press {
      --switch-item-background: --alpha(var(--color-io) / var(--opacity-io-face-soft));
    }
  }
}

@utility switch-bordered {
  @apply switch-base;
  --switch-border-style: solid;
  --switch-border-color: --alpha(var(--color-io) / var(--opacity-io-border));
  --switch-item-background-transparent: var(--color-on-io);
  --switch-item-color: var(--color-on-io);
  --switch-item-thumb-border-style: solid;
  --switch-item-thumb-border-color: --alpha(var(--color-io) / var(--opacity-io-face-strong));
  @variant switch-hover {
    --switch-border-color: --alpha(var(--color-io) / var(--opacity-io-border-strong));
    --switch-item-color: oklch(from var(--color-on-io) calc(l * var(--io-lightness-factor-soft)) c h);
  }

  .switch-item {
    @apply switch-item-pseudo-face;
    @variant switch-item-hover {
      --switch-item-color: var(--color-on-io);
      --switch-item-background: --alpha(var(--color-io) / var(--opacity-io-face));
    }
    @variant switch-item-current {
      --switch-item-background: transparent;
      --switch-item-color: oklch(from var(--color-on-io) calc(l * var(--io-lightness-factor-strong)) c h);
    }
    @variant switch-item-press {
      --switch-item-background: --alpha(var(--color-io) / var(--opacity-io-face-soft));
    }
  }
}

@utility switch-dashed {
  @apply switch-bordered;
  --switch-border-style: dashed;
}

@utility switch-ghost {
  @apply switch-base;
  --switch-item-color: var(--color-on-io);
  --switch-item-thumb-background: --alpha(var(--color-io) / var(--opacity-io-face-strong));
  @variant switch-hover {
    /* --switch-background: --alpha(var(--color-io) / var(--opacity-io-face-soft)); */
    --switch-item-color: oklch(from var(--color-on-io) calc(l * var(--io-lightness-factor-soft)) c h);
  }

  .switch-item {
    @variant switch-item-hover {
      --switch-item-color: var(--color-on-io);
      --switch-item-background: --alpha(var(--color-io) / var(--opacity-io-face));
    }
    @variant switch-item-current {
      --switch-item-color: oklch(from var(--color-on-io) calc(l * var(--io-lightness-factor-strong)) c h);
    }
  }
}
