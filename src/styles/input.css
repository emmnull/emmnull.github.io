/* .input,
.input-bordered,
.input-dashed,
.input-ghost {
  @apply rounded-io h-io min-h-io px-io-padding flex flex-row items-center [&.rounded-full]:[--radius-io:var(--radius-full)];
}
.input {
}
.input-bordered,
.input-dashed {
}
.input-dashed {
}
.input-ghost {
} */

.input-group,
.input-group-bordered,
.input-group-dashed,
.input-group-ghost {
  position: relative;
  border-radius: var(--radius-io);
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  transition-property: all;
  transition-duration: var(--transition-duration-medium);
  transition-timing-function: var(--ease-out);
  &.rounded-full {
    --radius-io: var(--radius-full);
  }
  &:hover:not(:has(.input:focus)) {
    transition-duration: 0s;
    &::after {
      transition-property: inset;
      transition-duration: var(--transition-duration-xfast);
    }
  }
  &:has(.input:focus) {
    outline-color: var(--color-primary);
    outline-width: var(--outline-width-focus);
    > * {
      @variant icon {
        opacity: var(--opacity-full);
      }
    }
  }
  &:has(.input:active) {
    scale: var(--scale-press);
  }
  &:is(label) {
    cursor: text;
  }
  &::after,
  &::before {
    pointer-events: none;
    z-index: -1;
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    transition-property: all;
    transition-duration: inherit;
    transition-timing-function: inherit;
  }
  @variant *:icon {
    pointer-events: none;
    opacity: var(--opacity-soft);
    width: var(--spacing-icon);
    height: var(--spacing-icon);
    &:first-child {
      margin-left: var(--spacing-io-padding);
    }
    &:last-child {
      margin-right: var(--spacing-io-padding);
    }
    + .input-peer {
      margin-left: 0;
    }
    + .input {
      padding-left: calc(var(--spacing-io-padding) - var(--spacing-io-nesting));
    }
  }
  .input {
    position: relative;
    z-index: 1;
    background: transparent;
    align-self: stretch;
    display: flex;
    flex-direction: row;
    gap: var(--spacing-io-gap);
    align-items: center;
    border-radius: inherit;
    padding-inline: var(--spacing-io-padding);
    + .input-peer {
      margin-left: 0;
    }
  }
  .input-fill {
    cursor: text;
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    border-radius: inherit;
  }
  .input-peer {
    @apply nest-group;
    position: relative;
    z-index: 1;
    margin: var(--spacing-io-nesting);
    + .input {
      margin-left: calc(var(--spacing-io-padding) - var(--spacing-io-nesting));
    }
    + {
      @variant icon {
        margin-left: calc(var(--spacing-io-padding) - var(--spacing-io-nesting));
      }
    }
  }
  .input-affix {
    padding-inline: calc(0.5 * var(--spacing-io-padding));
    + .input {
      padding-left: 0;
    }
  }
}
/* Default variant */
.input-group {
  color: var(--color-x-io);
  &::after {
    background: var(--color-io);
  }
  &:has(.input:hover) {
    &::after {
      background: var(--color-io-accent);
    }
    .input {
      color: var(--color-x-io-accent);
    }
  }
  &:has(.input:focus) {
    background: var(--color-base);
    .input {
      color: var(--color-x-base);
    }
    @variant *:icon {
      color: var(--color-primary-accent);
    }
  }
}
/* Bordered and dashed variants */
.input-group-bordered,
.input-group-dashed {
  color: var(--color-x-io);
  &::after {
    inset: var(--spacing-io-fx-inset);
  }
  &::before {
    border-width: var(--border-width-io);
    border-style: solid;
    border-color: var(--color-io);
  }
  &:hover {
    &::after {
      inset: 0;
      background: var(--color-io);
    }
    &::before {
      border-color: transparent;
    }
    @variant *:icon, .input {
      color: var(--color-x-io-accent);
    }
  }
  &:has(.input:focus) {
    &::after {
      inset: 0;
      background: var(--color-base);
    }
    .input {
      color: var(--color-x-base);
    }
    @variant * {
      @variant icon {
        color: var(--color-primary-accent);
      }
    }
  }
}
.input-group-dashed {
  &::before {
    border-style: dashed;
  }
}
/* Ghost variant */
.input-group-ghost {
  color: var(--color-x-io);
  &::after {
    inset: var(--spacing-io-fx-inset);
    background: transparent;
  }
  &:hover {
    color: var(--color-x-io-accent);
    &::after {
      inset: 0;
      background: var(--color-io);
    }
  }
  &:has(.input:focus) {
    &::after {
      inset: 0;
      background: var(--color-base);
    }
    .input {
      color: var(--color-x-base);
    }
    @variant *:icon {
      color: var(--color-primary-accent);
    }
  }
}
